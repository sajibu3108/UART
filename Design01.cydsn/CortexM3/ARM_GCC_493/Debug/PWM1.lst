ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM1_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM1_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM1_Enable, %function
  24              	PWM1_Enable:
  25              	.LFB2:
  26              		.file 1 "Generated_Source\\PSoC5\\PWM1.c"
   1:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM1.c **** * File Name: PWM1.c
   3:Generated_Source\PSoC5/PWM1.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM1.c **** *
   5:Generated_Source\PSoC5/PWM1.c **** * Description:
   6:Generated_Source\PSoC5/PWM1.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM1.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM1.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM1.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM1.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM1.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM1.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM1.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM1.c **** *
  15:Generated_Source\PSoC5/PWM1.c **** * Note:
  16:Generated_Source\PSoC5/PWM1.c **** *
  17:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM1.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM1.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM1.c **** 
  24:Generated_Source\PSoC5/PWM1.c **** #include "PWM1.h"
  25:Generated_Source\PSoC5/PWM1.c **** 
  26:Generated_Source\PSoC5/PWM1.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM1.c **** #ifdef PWM1_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM1.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM1.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM1.c **** #endif /* PWM1_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/PWM1.c **** 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 2


  32:Generated_Source\PSoC5/PWM1.c **** uint8 PWM1_initVar = 0u;
  33:Generated_Source\PSoC5/PWM1.c **** 
  34:Generated_Source\PSoC5/PWM1.c **** 
  35:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Start
  37:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM1.c **** *
  39:Generated_Source\PSoC5/PWM1.c **** * Summary:
  40:Generated_Source\PSoC5/PWM1.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM1.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM1.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM1.c **** *
  44:Generated_Source\PSoC5/PWM1.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM1.c **** *  None
  46:Generated_Source\PSoC5/PWM1.c **** *
  47:Generated_Source\PSoC5/PWM1.c **** * Return:
  48:Generated_Source\PSoC5/PWM1.c **** *  None
  49:Generated_Source\PSoC5/PWM1.c **** *
  50:Generated_Source\PSoC5/PWM1.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM1.c **** *  PWM1_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM1.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM1.c **** *
  54:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM1.c **** void PWM1_Start(void) 
  56:Generated_Source\PSoC5/PWM1.c **** {
  57:Generated_Source\PSoC5/PWM1.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM1.c ****     if(PWM1_initVar == 0u)
  59:Generated_Source\PSoC5/PWM1.c ****     {
  60:Generated_Source\PSoC5/PWM1.c ****         PWM1_Init();
  61:Generated_Source\PSoC5/PWM1.c ****         PWM1_initVar = 1u;
  62:Generated_Source\PSoC5/PWM1.c ****     }
  63:Generated_Source\PSoC5/PWM1.c ****     PWM1_Enable();
  64:Generated_Source\PSoC5/PWM1.c **** 
  65:Generated_Source\PSoC5/PWM1.c **** }
  66:Generated_Source\PSoC5/PWM1.c **** 
  67:Generated_Source\PSoC5/PWM1.c **** 
  68:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Init
  70:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM1.c **** *
  72:Generated_Source\PSoC5/PWM1.c **** * Summary:
  73:Generated_Source\PSoC5/PWM1.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM1.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM1.c **** *  PWM1_Start().
  76:Generated_Source\PSoC5/PWM1.c **** *
  77:Generated_Source\PSoC5/PWM1.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM1.c **** *  None
  79:Generated_Source\PSoC5/PWM1.c **** *
  80:Generated_Source\PSoC5/PWM1.c **** * Return:
  81:Generated_Source\PSoC5/PWM1.c **** *  None
  82:Generated_Source\PSoC5/PWM1.c **** *
  83:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM1.c **** void PWM1_Init(void) 
  85:Generated_Source\PSoC5/PWM1.c **** {
  86:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction || PWM1_UseControl)
  87:Generated_Source\PSoC5/PWM1.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction || PWM1_UseControl) */
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 3


  89:Generated_Source\PSoC5/PWM1.c **** 
  90:Generated_Source\PSoC5/PWM1.c ****     #if(!PWM1_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UseStatus)
  92:Generated_Source\PSoC5/PWM1.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM1.c ****             uint8 PWM1_interruptState;
  94:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseStatus) */
  95:Generated_Source\PSoC5/PWM1.c ****     #endif /* (!PWM1_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM1.c **** 
  97:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM1.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL |= PWM1_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM1.c ****             PWM1_CONTROL |= PWM1_CFG0_DB;
 102:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM1.c **** 
 104:Generated_Source\PSoC5/PWM1.c ****         ctrl = PWM1_CONTROL3 & ((uint8 )(~PWM1_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL3 = ctrl | PWM1_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM1.c **** 
 107:Generated_Source\PSoC5/PWM1.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 &= ((uint8)(~PWM1_RT1_MASK));
 109:Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 |= PWM1_SYNC;
 110:Generated_Source\PSoC5/PWM1.c **** 
 111:Generated_Source\PSoC5/PWM1.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 &= ((uint8)(~PWM1_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 |= PWM1_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM1.c **** 
 115:Generated_Source\PSoC5/PWM1.c ****     #elif (PWM1_UseControl)
 116:Generated_Source\PSoC5/PWM1.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM1.c ****         ctrl = PWM1_CONTROL & ((uint8)(~PWM1_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM1.c ****                 ((uint8)(~PWM1_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL = ctrl | PWM1_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM1.c ****                                    PWM1_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM1.c **** 
 123:Generated_Source\PSoC5/PWM1.c ****     #if (!PWM1_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_Resolution == 8)
 125:Generated_Source\PSoC5/PWM1.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP0 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM1.c ****         #else /* (PWM1_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM1.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP0 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP1 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM1.c **** 
 133:Generated_Source\PSoC5/PWM1.c ****         PWM1_WriteCounter(PWM1_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM1.c ****     #endif /* (!PWM1_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM1.c **** 
 136:Generated_Source\PSoC5/PWM1.c ****     PWM1_WritePeriod(PWM1_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM1.c **** 
 138:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare(PWM1_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM1.c ****         #else
 141:Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare1(PWM1_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare2(PWM1_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM1.c **** 
 145:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_KillModeMinTime)
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 4


 146:Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteKillTime(PWM1_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM1.c **** 
 149:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteDeadTime(PWM1_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM1.c **** 
 153:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseStatus || PWM1_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM1.c ****         PWM1_SetInterruptMode(PWM1_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseStatus || PWM1_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM1.c **** 
 157:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM1.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_ENABLE |= PWM1_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM1.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL2 |= PWM1_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM1.c ****     #else
 163:Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UseStatus)
 164:Generated_Source\PSoC5/PWM1.c **** 
 165:Generated_Source\PSoC5/PWM1.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM1.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM1.c ****             PWM1_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM1.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM1.c ****             PWM1_STATUS_AUX_CTRL |= PWM1_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM1.c **** 
 171:Generated_Source\PSoC5/PWM1.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM1.c ****             CyExitCriticalSection(PWM1_interruptState);
 173:Generated_Source\PSoC5/PWM1.c **** 
 174:Generated_Source\PSoC5/PWM1.c ****             /* Clear the FIFO to enable the PWM1_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM1.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM1.c ****             PWM1_ClearFIFO();
 177:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseStatus) */
 178:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM1.c **** }
 180:Generated_Source\PSoC5/PWM1.c **** 
 181:Generated_Source\PSoC5/PWM1.c **** 
 182:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Enable
 184:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM1.c **** *
 186:Generated_Source\PSoC5/PWM1.c **** * Summary:
 187:Generated_Source\PSoC5/PWM1.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM1.c **** *
 189:Generated_Source\PSoC5/PWM1.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM1.c **** *  None
 191:Generated_Source\PSoC5/PWM1.c **** *
 192:Generated_Source\PSoC5/PWM1.c **** * Return:
 193:Generated_Source\PSoC5/PWM1.c **** *  None
 194:Generated_Source\PSoC5/PWM1.c **** *
 195:Generated_Source\PSoC5/PWM1.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM1.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM1.c **** *
 198:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM1.c **** void PWM1_Enable(void) 
 200:Generated_Source\PSoC5/PWM1.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE2:
  35              		.size	PWM1_Enable, .-PWM1_Enable
  36 0002 00BF     		.section	.text.PWM1_Stop,"ax",%progbits
  37              		.align	2
  38              		.global	PWM1_Stop
  39              		.thumb
  40              		.thumb_func
  41              		.type	PWM1_Stop, %function
  42              	PWM1_Stop:
  43              	.LFB3:
 201:Generated_Source\PSoC5/PWM1.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_ENABLE |= PWM1_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_STBY_ENABLE |= PWM1_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM1.c **** 
 207:Generated_Source\PSoC5/PWM1.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseControl || PWM1_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL |= PWM1_CTRL_ENABLE;
 210:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseControl || PWM1_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM1.c **** }
 212:Generated_Source\PSoC5/PWM1.c **** 
 213:Generated_Source\PSoC5/PWM1.c **** 
 214:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Stop
 216:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM1.c **** *
 218:Generated_Source\PSoC5/PWM1.c **** * Summary:
 219:Generated_Source\PSoC5/PWM1.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM1.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM1.c **** *
 222:Generated_Source\PSoC5/PWM1.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM1.c **** *  None
 224:Generated_Source\PSoC5/PWM1.c **** *
 225:Generated_Source\PSoC5/PWM1.c **** * Return:
 226:Generated_Source\PSoC5/PWM1.c **** *  None
 227:Generated_Source\PSoC5/PWM1.c **** *
 228:Generated_Source\PSoC5/PWM1.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM1.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM1.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM1.c **** *
 232:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM1.c **** void PWM1_Stop(void) 
 234:Generated_Source\PSoC5/PWM1.c **** {
  44              		.loc 1 234 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
  48              		@ link register save eliminated.
  49 0000 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE3:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 6


  52              		.size	PWM1_Stop, .-PWM1_Stop
  53 0002 00BF     		.section	.text.PWM1_WriteCounter,"ax",%progbits
  54              		.align	2
  55              		.global	PWM1_WriteCounter
  56              		.thumb
  57              		.thumb_func
  58              		.type	PWM1_WriteCounter, %function
  59              	PWM1_WriteCounter:
  60              	.LFB4:
 235:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseControl || PWM1_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL &= ((uint8)(~PWM1_CTRL_ENABLE));
 237:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseControl || PWM1_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM1.c **** 
 239:Generated_Source\PSoC5/PWM1.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_ENABLE &= ((uint8)(~PWM1_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM1_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM1.c **** }
 245:Generated_Source\PSoC5/PWM1.c **** 
 246:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM1.c **** 
 249:Generated_Source\PSoC5/PWM1.c **** 
 250:Generated_Source\PSoC5/PWM1.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM1.c ****         * Function Name: PWM1_SetCompareMode
 252:Generated_Source\PSoC5/PWM1.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM1.c ****         *
 254:Generated_Source\PSoC5/PWM1.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM1.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM1.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM1.c ****         *
 258:Generated_Source\PSoC5/PWM1.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM1.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM1.c ****         *
 262:Generated_Source\PSoC5/PWM1.c ****         * Return:
 263:Generated_Source\PSoC5/PWM1.c ****         *  None
 264:Generated_Source\PSoC5/PWM1.c ****         *
 265:Generated_Source\PSoC5/PWM1.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM1.c ****         void PWM1_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM1.c ****         {
 268:Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM1.c **** 
 270:Generated_Source\PSoC5/PWM1.c ****                 #if(0 != PWM1_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE1_SHI
 272:Generated_Source\PSoC5/PWM1.c ****                 #else
 273:Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM1.c ****                 #endif /* (0 != PWM1_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM1.c **** 
 276:Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL3 &= ((uint8)(~PWM1_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM1.c **** 
 279:Generated_Source\PSoC5/PWM1.c ****             #elif (PWM1_UseControl)
 280:Generated_Source\PSoC5/PWM1.c **** 
 281:Generated_Source\PSoC5/PWM1.c ****                 #if(0 != PWM1_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE1_SH
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 7


 283:Generated_Source\PSoC5/PWM1.c ****                                                 PWM1_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM1.c ****                 #else
 285:Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode1masked = comparemode & PWM1_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM1.c ****                 #endif /* (0 != PWM1_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM1.c **** 
 288:Generated_Source\PSoC5/PWM1.c ****                 #if(0 != PWM1_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE2_SH
 290:Generated_Source\PSoC5/PWM1.c ****                                                PWM1_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM1.c ****                 #else
 292:Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode2masked = comparemode & PWM1_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM1.c ****                 #endif /* (0 != PWM1_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM1.c **** 
 295:Generated_Source\PSoC5/PWM1.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL &= ((uint8)(~(PWM1_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM1.c ****                                             PWM1_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM1.c **** 
 300:Generated_Source\PSoC5/PWM1.c ****             #else
 301:Generated_Source\PSoC5/PWM1.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM1.c ****         }
 304:Generated_Source\PSoC5/PWM1.c ****     #endif /* PWM1_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM1.c **** 
 306:Generated_Source\PSoC5/PWM1.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM1.c **** 
 308:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM1.c **** 
 310:Generated_Source\PSoC5/PWM1.c **** 
 311:Generated_Source\PSoC5/PWM1.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM1.c ****         * Function Name: PWM1_SetCompareMode1
 313:Generated_Source\PSoC5/PWM1.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM1.c ****         *
 315:Generated_Source\PSoC5/PWM1.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM1.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM1.c ****         *
 318:Generated_Source\PSoC5/PWM1.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM1.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM1.c ****         *
 322:Generated_Source\PSoC5/PWM1.c ****         * Return:
 323:Generated_Source\PSoC5/PWM1.c ****         *  None
 324:Generated_Source\PSoC5/PWM1.c ****         *
 325:Generated_Source\PSoC5/PWM1.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM1.c ****         void PWM1_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM1.c ****         {
 328:Generated_Source\PSoC5/PWM1.c ****             #if(0 != PWM1_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM1.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE1_SHIFT))
 330:Generated_Source\PSoC5/PWM1.c ****                                            PWM1_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM1.c ****             #else
 332:Generated_Source\PSoC5/PWM1.c ****                 uint8 comparemodemasked = comparemode & PWM1_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM1.c ****             #endif /* (0 != PWM1_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM1.c **** 
 335:Generated_Source\PSoC5/PWM1.c ****             #if (PWM1_UseControl)
 336:Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL &= ((uint8)(~PWM1_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_UseControl) */
 339:Generated_Source\PSoC5/PWM1.c ****         }
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 8


 340:Generated_Source\PSoC5/PWM1.c ****     #endif /* PWM1_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM1.c **** 
 342:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM1.c **** 
 344:Generated_Source\PSoC5/PWM1.c **** 
 345:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_SetCompareMode2
 347:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM1.c ****     *
 349:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM1.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM1.c ****     *
 352:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM1.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM1.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM1.c ****     *
 356:Generated_Source\PSoC5/PWM1.c ****     * Return:
 357:Generated_Source\PSoC5/PWM1.c ****     *  None
 358:Generated_Source\PSoC5/PWM1.c ****     *
 359:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM1.c ****     void PWM1_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM1.c ****     {
 362:Generated_Source\PSoC5/PWM1.c **** 
 363:Generated_Source\PSoC5/PWM1.c ****         #if(0 != PWM1_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM1.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM1.c ****                                                  PWM1_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM1.c ****         #else
 367:Generated_Source\PSoC5/PWM1.c ****             uint8 comparemodemasked = comparemode & PWM1_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM1.c ****         #endif /* (0 != PWM1_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM1.c **** 
 370:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_UseControl)
 371:Generated_Source\PSoC5/PWM1.c ****             PWM1_CONTROL &= ((uint8)(~PWM1_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM1.c ****             PWM1_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseControl) */
 374:Generated_Source\PSoC5/PWM1.c ****     }
 375:Generated_Source\PSoC5/PWM1.c ****     #endif /*PWM1_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM1.c **** 
 377:Generated_Source\PSoC5/PWM1.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM1.c **** 
 379:Generated_Source\PSoC5/PWM1.c **** 
 380:Generated_Source\PSoC5/PWM1.c **** #if (!PWM1_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM1.c **** 
 382:Generated_Source\PSoC5/PWM1.c **** 
 383:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCounter
 385:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM1.c ****     *
 387:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM1.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM1.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM1.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM1.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM1.c ****     *
 393:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM1.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM1.c ****     *
 396:Generated_Source\PSoC5/PWM1.c ****     * Return:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 9


 397:Generated_Source\PSoC5/PWM1.c ****     *  None
 398:Generated_Source\PSoC5/PWM1.c ****     *
 399:Generated_Source\PSoC5/PWM1.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM1.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM1.c ****     *
 402:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCounter(uint8 counter) \
 404:Generated_Source\PSoC5/PWM1.c ****                                        
 405:Generated_Source\PSoC5/PWM1.c ****     {
  61              		.loc 1 405 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL0:
 406:Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_COUNTER_LSB_PTR, counter);
  67              		.loc 1 406 0
  68 0000 014B     		ldr	r3, .L4
  69 0002 1870     		strb	r0, [r3]
  70 0004 7047     		bx	lr
  71              	.L5:
  72 0006 00BF     		.align	2
  73              	.L4:
  74 0008 09650040 		.word	1073767689
  75              		.cfi_endproc
  76              	.LFE4:
  77              		.size	PWM1_WriteCounter, .-PWM1_WriteCounter
  78              		.section	.text.PWM1_ReadCounter,"ax",%progbits
  79              		.align	2
  80              		.global	PWM1_ReadCounter
  81              		.thumb
  82              		.thumb_func
  83              		.type	PWM1_ReadCounter, %function
  84              	PWM1_ReadCounter:
  85              	.LFB5:
 407:Generated_Source\PSoC5/PWM1.c ****     }
 408:Generated_Source\PSoC5/PWM1.c **** 
 409:Generated_Source\PSoC5/PWM1.c **** 
 410:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCounter
 412:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM1.c ****     *
 414:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM1.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM1.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM1.c ****     *
 418:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM1.c ****     *  None
 420:Generated_Source\PSoC5/PWM1.c ****     *
 421:Generated_Source\PSoC5/PWM1.c ****     * Return:
 422:Generated_Source\PSoC5/PWM1.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM1.c ****     *
 424:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM1.c ****     {
  86              		.loc 1 426 0
  87              		.cfi_startproc
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 10


  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM1.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM1.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM1.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM1.c ****           (void)CY_GET_REG8(PWM1_COUNTERCAP_LSB_PTR_8BIT);
  91              		.loc 1 430 0
  92 0000 024B     		ldr	r3, .L7
  93 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM1.c **** 
 432:Generated_Source\PSoC5/PWM1.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_CAPTURE_LSB_PTR));
  94              		.loc 1 433 0
  95 0004 024B     		ldr	r3, .L7+4
  96 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 434:Generated_Source\PSoC5/PWM1.c ****     }
  97              		.loc 1 434 0
  98 0008 7047     		bx	lr
  99              	.L8:
 100 000a 00BF     		.align	2
 101              	.L7:
 102 000c 19650040 		.word	1073767705
 103 0010 59650040 		.word	1073767769
 104              		.cfi_endproc
 105              	.LFE5:
 106              		.size	PWM1_ReadCounter, .-PWM1_ReadCounter
 107              		.section	.text.PWM1_WritePeriod,"ax",%progbits
 108              		.align	2
 109              		.global	PWM1_WritePeriod
 110              		.thumb
 111              		.thumb_func
 112              		.type	PWM1_WritePeriod, %function
 113              	PWM1_WritePeriod:
 114              	.LFB7:
 435:Generated_Source\PSoC5/PWM1.c **** 
 436:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseStatus)
 437:Generated_Source\PSoC5/PWM1.c **** 
 438:Generated_Source\PSoC5/PWM1.c **** 
 439:Generated_Source\PSoC5/PWM1.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM1.c ****         * Function Name: PWM1_ClearFIFO
 441:Generated_Source\PSoC5/PWM1.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM1.c ****         *
 443:Generated_Source\PSoC5/PWM1.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM1.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM1.c ****         *
 446:Generated_Source\PSoC5/PWM1.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM1.c ****         *  None
 448:Generated_Source\PSoC5/PWM1.c ****         *
 449:Generated_Source\PSoC5/PWM1.c ****         * Return:
 450:Generated_Source\PSoC5/PWM1.c ****         *  None
 451:Generated_Source\PSoC5/PWM1.c ****         *
 452:Generated_Source\PSoC5/PWM1.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM1.c ****         void PWM1_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM1.c ****         {
 455:Generated_Source\PSoC5/PWM1.c ****             while(0u != (PWM1_ReadStatusRegister() & PWM1_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM1.c ****             {
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 11


 457:Generated_Source\PSoC5/PWM1.c ****                 (void)PWM1_ReadCapture();
 458:Generated_Source\PSoC5/PWM1.c ****             }
 459:Generated_Source\PSoC5/PWM1.c ****         }
 460:Generated_Source\PSoC5/PWM1.c **** 
 461:Generated_Source\PSoC5/PWM1.c ****     #endif /* PWM1_UseStatus */
 462:Generated_Source\PSoC5/PWM1.c **** 
 463:Generated_Source\PSoC5/PWM1.c **** #endif /* !PWM1_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM1.c **** 
 465:Generated_Source\PSoC5/PWM1.c **** 
 466:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_WritePeriod
 468:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM1.c **** *
 470:Generated_Source\PSoC5/PWM1.c **** * Summary:
 471:Generated_Source\PSoC5/PWM1.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM1.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM1.c **** *
 474:Generated_Source\PSoC5/PWM1.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM1.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM1.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM1.c **** *
 478:Generated_Source\PSoC5/PWM1.c **** * Return:
 479:Generated_Source\PSoC5/PWM1.c **** *  None
 480:Generated_Source\PSoC5/PWM1.c **** *
 481:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM1.c **** void PWM1_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM1.c **** {
 115              		.loc 1 483 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL1:
 484:Generated_Source\PSoC5/PWM1.c ****     #if(PWM1_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG16(PWM1_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM1.c ****     #else
 487:Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_PERIOD_LSB_PTR, period);
 121              		.loc 1 487 0
 122 0000 014B     		ldr	r3, .L10
 123 0002 1870     		strb	r0, [r3]
 124 0004 7047     		bx	lr
 125              	.L11:
 126 0006 00BF     		.align	2
 127              	.L10:
 128 0008 49650040 		.word	1073767753
 129              		.cfi_endproc
 130              	.LFE7:
 131              		.size	PWM1_WritePeriod, .-PWM1_WritePeriod
 132              		.section	.text.PWM1_WriteCompare,"ax",%progbits
 133              		.align	2
 134              		.global	PWM1_WriteCompare
 135              		.thumb
 136              		.thumb_func
 137              		.type	PWM1_WriteCompare, %function
 138              	PWM1_WriteCompare:
 139              	.LFB8:
 488:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 12


 489:Generated_Source\PSoC5/PWM1.c **** }
 490:Generated_Source\PSoC5/PWM1.c **** 
 491:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM1.c **** 
 493:Generated_Source\PSoC5/PWM1.c **** 
 494:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCompare
 496:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM1.c ****     *
 498:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM1.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM1.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM1.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM1.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM1.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM1.c ****     *
 505:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM1.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM1.c ****     *
 508:Generated_Source\PSoC5/PWM1.c ****     * Return:
 509:Generated_Source\PSoC5/PWM1.c ****     *  None
 510:Generated_Source\PSoC5/PWM1.c ****     *
 511:Generated_Source\PSoC5/PWM1.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM1.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM1.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM1.c ****     *
 515:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM1.c ****                                        
 518:Generated_Source\PSoC5/PWM1.c ****     {
 140              		.loc 1 518 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL2:
 519:Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG16(PWM1_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM1.c ****         #else
 522:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_COMPARE1_LSB_PTR, compare);
 146              		.loc 1 522 0
 147 0000 014B     		ldr	r3, .L13
 148 0002 1870     		strb	r0, [r3]
 149 0004 7047     		bx	lr
 150              	.L14:
 151 0006 00BF     		.align	2
 152              	.L13:
 153 0008 29650040 		.word	1073767721
 154              		.cfi_endproc
 155              	.LFE8:
 156              		.size	PWM1_WriteCompare, .-PWM1_WriteCompare
 157              		.section	.text.PWM1_SetInterruptMode,"ax",%progbits
 158              		.align	2
 159              		.global	PWM1_SetInterruptMode
 160              		.thumb
 161              		.thumb_func
 162              		.type	PWM1_SetInterruptMode, %function
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 13


 163              	PWM1_SetInterruptMode:
 164              	.LFB9:
 523:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM1.c **** 
 525:Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_PWMMode == PWM1__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM1.c ****                 CY_SET_REG16(PWM1_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM1.c ****             #else
 529:Generated_Source\PSoC5/PWM1.c ****                 CY_SET_REG8(PWM1_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_PWMMode == PWM1__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM1.c ****     }
 533:Generated_Source\PSoC5/PWM1.c **** 
 534:Generated_Source\PSoC5/PWM1.c **** 
 535:Generated_Source\PSoC5/PWM1.c **** #else
 536:Generated_Source\PSoC5/PWM1.c **** 
 537:Generated_Source\PSoC5/PWM1.c **** 
 538:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCompare1
 540:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM1.c ****     *
 542:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM1.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM1.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM1.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM1.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM1.c ****     *
 548:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM1.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM1.c ****     *
 551:Generated_Source\PSoC5/PWM1.c ****     * Return:
 552:Generated_Source\PSoC5/PWM1.c ****     *  None
 553:Generated_Source\PSoC5/PWM1.c ****     *
 554:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM1.c ****                                         
 557:Generated_Source\PSoC5/PWM1.c ****     {
 558:Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG16(PWM1_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM1.c ****         #else
 561:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM1.c ****     }
 564:Generated_Source\PSoC5/PWM1.c **** 
 565:Generated_Source\PSoC5/PWM1.c **** 
 566:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCompare2
 568:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM1.c ****     *
 570:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM1.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM1.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM1.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM1.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM1.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM1.c ****     *
 577:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 14


 578:Generated_Source\PSoC5/PWM1.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM1.c ****     *
 580:Generated_Source\PSoC5/PWM1.c ****     * Return:
 581:Generated_Source\PSoC5/PWM1.c ****     *  None
 582:Generated_Source\PSoC5/PWM1.c ****     *
 583:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM1.c ****                                         
 586:Generated_Source\PSoC5/PWM1.c ****     {
 587:Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG16(PWM1_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM1.c ****         #else
 590:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM1.c ****     }
 593:Generated_Source\PSoC5/PWM1.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM1.c **** 
 595:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM1.c **** 
 597:Generated_Source\PSoC5/PWM1.c **** 
 598:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteDeadTime
 600:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM1.c ****     *
 602:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM1.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM1.c ****     *
 605:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM1.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM1.c ****     *
 608:Generated_Source\PSoC5/PWM1.c ****     * Return:
 609:Generated_Source\PSoC5/PWM1.c ****     *  None
 610:Generated_Source\PSoC5/PWM1.c ****     *
 611:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM1.c ****     {
 614:Generated_Source\PSoC5/PWM1.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM1.c ****         #if(!PWM1_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM1.c ****         #else
 618:Generated_Source\PSoC5/PWM1.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM1.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM1.c ****             PWM1_DEADBAND_COUNT &= ((uint8)(~PWM1_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM1.c **** 
 622:Generated_Source\PSoC5/PWM1.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM1.c ****                 PWM1_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM1_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM1.c ****                                                     PWM1_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM1.c ****             #else
 627:Generated_Source\PSoC5/PWM1.c ****                 PWM1_DEADBAND_COUNT |= deadtime & PWM1_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM1.c **** 
 630:Generated_Source\PSoC5/PWM1.c ****         #endif /* (!PWM1_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM1.c ****     }
 632:Generated_Source\PSoC5/PWM1.c **** 
 633:Generated_Source\PSoC5/PWM1.c **** 
 634:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 15


 635:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadDeadTime
 636:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM1.c ****     *
 638:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM1.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM1.c ****     *
 641:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM1.c ****     *  None
 643:Generated_Source\PSoC5/PWM1.c ****     *
 644:Generated_Source\PSoC5/PWM1.c ****     * Return:
 645:Generated_Source\PSoC5/PWM1.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM1.c ****     *
 647:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM1.c ****     {
 650:Generated_Source\PSoC5/PWM1.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM1.c ****         #if(!PWM1_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM1.c ****             return (CY_GET_REG8(PWM1_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM1.c ****         #else
 654:Generated_Source\PSoC5/PWM1.c **** 
 655:Generated_Source\PSoC5/PWM1.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM1.c ****                 return ((uint8)(((uint8)(PWM1_DEADBAND_COUNT & PWM1_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM1.c ****                                                                            PWM1_DEADBAND_COUNT_SHIF
 659:Generated_Source\PSoC5/PWM1.c ****             #else
 660:Generated_Source\PSoC5/PWM1.c ****                 return (PWM1_DEADBAND_COUNT & PWM1_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM1.c ****         #endif /* (!PWM1_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM1.c ****     }
 664:Generated_Source\PSoC5/PWM1.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM1.c **** 
 666:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseStatus || PWM1_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM1.c **** 
 668:Generated_Source\PSoC5/PWM1.c **** 
 669:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_SetInterruptMode
 671:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM1.c ****     *
 673:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM1.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM1.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM1.c ****     *
 677:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM1.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM1.c ****     *
 680:Generated_Source\PSoC5/PWM1.c ****     * Return:
 681:Generated_Source\PSoC5/PWM1.c ****     *  None
 682:Generated_Source\PSoC5/PWM1.c ****     *
 683:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM1.c ****     void PWM1_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM1.c ****     {
 165              		.loc 1 685 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170              	.LVL3:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 16


 686:Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_STATUS_MASK_PTR, interruptMode);
 171              		.loc 1 686 0
 172 0000 014B     		ldr	r3, .L16
 173 0002 1870     		strb	r0, [r3]
 174 0004 7047     		bx	lr
 175              	.L17:
 176 0006 00BF     		.align	2
 177              	.L16:
 178 0008 89650040 		.word	1073767817
 179              		.cfi_endproc
 180              	.LFE9:
 181              		.size	PWM1_SetInterruptMode, .-PWM1_SetInterruptMode
 182              		.section	.text.PWM1_ReadStatusRegister,"ax",%progbits
 183              		.align	2
 184              		.global	PWM1_ReadStatusRegister
 185              		.thumb
 186              		.thumb_func
 187              		.type	PWM1_ReadStatusRegister, %function
 188              	PWM1_ReadStatusRegister:
 189              	.LFB10:
 687:Generated_Source\PSoC5/PWM1.c ****     }
 688:Generated_Source\PSoC5/PWM1.c **** 
 689:Generated_Source\PSoC5/PWM1.c **** 
 690:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM1.c ****     *
 694:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM1.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM1.c ****     *
 697:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM1.c ****     *  None
 699:Generated_Source\PSoC5/PWM1.c ****     *
 700:Generated_Source\PSoC5/PWM1.c ****     * Return:
 701:Generated_Source\PSoC5/PWM1.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM1.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM1.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM1.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM1.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM1.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM1.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM1.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM1.c ****     *
 710:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM1.c ****     {
 190              		.loc 1 712 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_STATUS_PTR));
 195              		.loc 1 713 0
 196 0000 014B     		ldr	r3, .L19
 197 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:Generated_Source\PSoC5/PWM1.c ****     }
 198              		.loc 1 714 0
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 17


 199 0004 7047     		bx	lr
 200              	.L20:
 201 0006 00BF     		.align	2
 202              	.L19:
 203 0008 69650040 		.word	1073767785
 204              		.cfi_endproc
 205              	.LFE10:
 206              		.size	PWM1_ReadStatusRegister, .-PWM1_ReadStatusRegister
 207              		.section	.text.PWM1_ReadCapture,"ax",%progbits
 208              		.align	2
 209              		.global	PWM1_ReadCapture
 210              		.thumb
 211              		.thumb_func
 212              		.type	PWM1_ReadCapture, %function
 213              	PWM1_ReadCapture:
 214              	.LFB11:
 715:Generated_Source\PSoC5/PWM1.c **** 
 716:Generated_Source\PSoC5/PWM1.c **** #endif /* (PWM1_UseStatus || PWM1_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM1.c **** 
 718:Generated_Source\PSoC5/PWM1.c **** 
 719:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseControl)
 720:Generated_Source\PSoC5/PWM1.c **** 
 721:Generated_Source\PSoC5/PWM1.c **** 
 722:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadControlRegister
 724:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM1.c ****     *
 726:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM1.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM1.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM1.c ****     *
 730:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM1.c ****     *  None
 732:Generated_Source\PSoC5/PWM1.c ****     *
 733:Generated_Source\PSoC5/PWM1.c ****     * Return:
 734:Generated_Source\PSoC5/PWM1.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM1.c ****     *
 736:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM1.c ****     {
 739:Generated_Source\PSoC5/PWM1.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM1.c **** 
 741:Generated_Source\PSoC5/PWM1.c ****         result = CY_GET_REG8(PWM1_CONTROL_PTR);
 742:Generated_Source\PSoC5/PWM1.c ****         return (result);
 743:Generated_Source\PSoC5/PWM1.c ****     }
 744:Generated_Source\PSoC5/PWM1.c **** 
 745:Generated_Source\PSoC5/PWM1.c **** 
 746:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteControlRegister
 748:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM1.c ****     *
 750:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM1.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM1.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM1.c ****     *
 754:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM1.c ****     *  uint8 control: Control register bit field, The status register bits are:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 18


 756:Generated_Source\PSoC5/PWM1.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM1.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM1.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM1.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM1.c ****     *
 761:Generated_Source\PSoC5/PWM1.c ****     * Return:
 762:Generated_Source\PSoC5/PWM1.c ****     *  None
 763:Generated_Source\PSoC5/PWM1.c ****     *
 764:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM1.c ****     {
 767:Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_CONTROL_PTR, control);
 768:Generated_Source\PSoC5/PWM1.c ****     }
 769:Generated_Source\PSoC5/PWM1.c **** 
 770:Generated_Source\PSoC5/PWM1.c **** #endif /* (PWM1_UseControl) */
 771:Generated_Source\PSoC5/PWM1.c **** 
 772:Generated_Source\PSoC5/PWM1.c **** 
 773:Generated_Source\PSoC5/PWM1.c **** #if (!PWM1_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM1.c **** 
 775:Generated_Source\PSoC5/PWM1.c **** 
 776:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCapture
 778:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM1.c ****     *
 780:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM1.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM1.c ****     *
 783:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM1.c ****     *  None
 785:Generated_Source\PSoC5/PWM1.c ****     *
 786:Generated_Source\PSoC5/PWM1.c ****     * Return:
 787:Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM1.c ****     *
 789:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM1.c ****     {
 215              		.loc 1 791 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_CAPTURE_LSB_PTR));
 220              		.loc 1 792 0
 221 0000 014B     		ldr	r3, .L22
 222 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 793:Generated_Source\PSoC5/PWM1.c ****     }
 223              		.loc 1 793 0
 224 0004 7047     		bx	lr
 225              	.L23:
 226 0006 00BF     		.align	2
 227              	.L22:
 228 0008 59650040 		.word	1073767769
 229              		.cfi_endproc
 230              	.LFE11:
 231              		.size	PWM1_ReadCapture, .-PWM1_ReadCapture
 232              		.section	.text.PWM1_ClearFIFO,"ax",%progbits
 233              		.align	2
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 19


 234              		.global	PWM1_ClearFIFO
 235              		.thumb
 236              		.thumb_func
 237              		.type	PWM1_ClearFIFO, %function
 238              	PWM1_ClearFIFO:
 239              	.LFB6:
 454:Generated_Source\PSoC5/PWM1.c ****             while(0u != (PWM1_ReadStatusRegister() & PWM1_STATUS_FIFONEMPTY))
 240              		.loc 1 454 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244 0000 08B5     		push	{r3, lr}
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 3, -8
 247              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM1.c ****             {
 248              		.loc 1 455 0
 249 0002 01E0     		b	.L25
 250              	.L26:
 457:Generated_Source\PSoC5/PWM1.c ****             }
 251              		.loc 1 457 0
 252 0004 FFF7FEFF 		bl	PWM1_ReadCapture
 253              	.LVL4:
 254              	.L25:
 455:Generated_Source\PSoC5/PWM1.c ****             {
 255              		.loc 1 455 0
 256 0008 FFF7FEFF 		bl	PWM1_ReadStatusRegister
 257              	.LVL5:
 258 000c 10F0100F 		tst	r0, #16
 259 0010 F8D1     		bne	.L26
 459:Generated_Source\PSoC5/PWM1.c **** 
 260              		.loc 1 459 0
 261 0012 08BD     		pop	{r3, pc}
 262              		.cfi_endproc
 263              	.LFE6:
 264              		.size	PWM1_ClearFIFO, .-PWM1_ClearFIFO
 265              		.section	.text.PWM1_Init,"ax",%progbits
 266              		.align	2
 267              		.global	PWM1_Init
 268              		.thumb
 269              		.thumb_func
 270              		.type	PWM1_Init, %function
 271              	PWM1_Init:
 272              	.LFB1:
  85:Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction || PWM1_UseControl)
 273              		.loc 1 85 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277 0000 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
 126:Generated_Source\PSoC5/PWM1.c ****         #else /* (PWM1_Resolution == 16)*/
 281              		.loc 1 126 0
 282 0002 0E4C     		ldr	r4, .L30
 283 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 20


 284 0006 43F00103 		orr	r3, r3, #1
 285 000a 2370     		strb	r3, [r4]
 133:Generated_Source\PSoC5/PWM1.c ****     #endif /* (!PWM1_UsingFixedFunction) */
 286              		.loc 1 133 0
 287 000c FF20     		movs	r0, #255
 288 000e FFF7FEFF 		bl	PWM1_WriteCounter
 289              	.LVL6:
 136:Generated_Source\PSoC5/PWM1.c **** 
 290              		.loc 1 136 0
 291 0012 FF20     		movs	r0, #255
 292 0014 FFF7FEFF 		bl	PWM1_WritePeriod
 293              	.LVL7:
 139:Generated_Source\PSoC5/PWM1.c ****         #else
 294              		.loc 1 139 0
 295 0018 7F20     		movs	r0, #127
 296 001a FFF7FEFF 		bl	PWM1_WriteCompare
 297              	.LVL8:
 154:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseStatus || PWM1_UsingFixedFunction) */
 298              		.loc 1 154 0
 299 001e 0020     		movs	r0, #0
 300 0020 FFF7FEFF 		bl	PWM1_SetInterruptMode
 301              	.LVL9:
 167:Generated_Source\PSoC5/PWM1.c ****             /* Use the interrupt output of the status register for IRQ output */
 302              		.loc 1 167 0
 303 0024 FFF7FEFF 		bl	CyEnterCriticalSection
 304              	.LVL10:
 169:Generated_Source\PSoC5/PWM1.c **** 
 305              		.loc 1 169 0
 306 0028 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 307 002a 43F01003 		orr	r3, r3, #16
 308 002e 2370     		strb	r3, [r4]
 172:Generated_Source\PSoC5/PWM1.c **** 
 309              		.loc 1 172 0
 310 0030 FFF7FEFF 		bl	CyExitCriticalSection
 311              	.LVL11:
 176:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseStatus) */
 312              		.loc 1 176 0
 313 0034 FFF7FEFF 		bl	PWM1_ClearFIFO
 314              	.LVL12:
 315 0038 10BD     		pop	{r4, pc}
 316              	.L31:
 317 003a 00BF     		.align	2
 318              	.L30:
 319 003c 99650040 		.word	1073767833
 320              		.cfi_endproc
 321              	.LFE1:
 322              		.size	PWM1_Init, .-PWM1_Init
 323              		.section	.text.PWM1_Start,"ax",%progbits
 324              		.align	2
 325              		.global	PWM1_Start
 326              		.thumb
 327              		.thumb_func
 328              		.type	PWM1_Start, %function
 329              	PWM1_Start:
 330              	.LFB0:
  56:Generated_Source\PSoC5/PWM1.c ****     /* If not Initialized then initialize all required hardware and software */
 331              		.loc 1 56 0
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 21


 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335 0000 08B5     		push	{r3, lr}
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 3, -8
 338              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM1.c ****     {
 339              		.loc 1 58 0
 340 0002 044B     		ldr	r3, .L35
 341 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 342 0006 23B9     		cbnz	r3, .L32
  60:Generated_Source\PSoC5/PWM1.c ****         PWM1_initVar = 1u;
 343              		.loc 1 60 0
 344 0008 FFF7FEFF 		bl	PWM1_Init
 345              	.LVL13:
  61:Generated_Source\PSoC5/PWM1.c ****     }
 346              		.loc 1 61 0
 347 000c 0122     		movs	r2, #1
 348 000e 014B     		ldr	r3, .L35
 349 0010 1A70     		strb	r2, [r3]
 350              	.L32:
 351 0012 08BD     		pop	{r3, pc}
 352              	.L36:
 353              		.align	2
 354              	.L35:
 355 0014 00000000 		.word	.LANCHOR0
 356              		.cfi_endproc
 357              	.LFE0:
 358              		.size	PWM1_Start, .-PWM1_Start
 359              		.section	.text.PWM1_ReadCompare,"ax",%progbits
 360              		.align	2
 361              		.global	PWM1_ReadCompare
 362              		.thumb
 363              		.thumb_func
 364              		.type	PWM1_ReadCompare, %function
 365              	PWM1_ReadCompare:
 366              	.LFB12:
 794:Generated_Source\PSoC5/PWM1.c **** 
 795:Generated_Source\PSoC5/PWM1.c **** #endif /* (!PWM1_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM1.c **** 
 797:Generated_Source\PSoC5/PWM1.c **** 
 798:Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM1.c **** 
 800:Generated_Source\PSoC5/PWM1.c **** 
 801:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCompare
 803:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM1.c ****     *
 805:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM1.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM1.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM1.c ****     *
 809:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM1.c ****     *  None
 811:Generated_Source\PSoC5/PWM1.c ****     *
 812:Generated_Source\PSoC5/PWM1.c ****     * Return:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 22


 813:Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM1.c ****     *
 815:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM1.c ****     {
 367              		.loc 1 817 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM1.c ****             return ((uint8)CY_GET_REG16(PWM1_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM1.c ****         #else
 821:Generated_Source\PSoC5/PWM1.c ****             return (CY_GET_REG8(PWM1_COMPARE1_LSB_PTR));
 372              		.loc 1 821 0
 373 0000 014B     		ldr	r3, .L38
 374 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 822:Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM1.c ****     }
 375              		.loc 1 823 0
 376 0004 7047     		bx	lr
 377              	.L39:
 378 0006 00BF     		.align	2
 379              	.L38:
 380 0008 29650040 		.word	1073767721
 381              		.cfi_endproc
 382              	.LFE12:
 383              		.size	PWM1_ReadCompare, .-PWM1_ReadCompare
 384              		.section	.text.PWM1_ReadPeriod,"ax",%progbits
 385              		.align	2
 386              		.global	PWM1_ReadPeriod
 387              		.thumb
 388              		.thumb_func
 389              		.type	PWM1_ReadPeriod, %function
 390              	PWM1_ReadPeriod:
 391              	.LFB13:
 824:Generated_Source\PSoC5/PWM1.c **** 
 825:Generated_Source\PSoC5/PWM1.c **** #else
 826:Generated_Source\PSoC5/PWM1.c **** 
 827:Generated_Source\PSoC5/PWM1.c **** 
 828:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCompare1
 830:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM1.c ****     *
 832:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM1.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM1.c ****     *
 835:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM1.c ****     *  None
 837:Generated_Source\PSoC5/PWM1.c ****     *
 838:Generated_Source\PSoC5/PWM1.c ****     * Return:
 839:Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM1.c ****     *
 841:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM1.c ****     {
 844:Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_COMPARE1_LSB_PTR));
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 23


 845:Generated_Source\PSoC5/PWM1.c ****     }
 846:Generated_Source\PSoC5/PWM1.c **** 
 847:Generated_Source\PSoC5/PWM1.c **** 
 848:Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCompare2
 850:Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM1.c ****     *
 852:Generated_Source\PSoC5/PWM1.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM1.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM1.c ****     *
 855:Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM1.c ****     *  None
 857:Generated_Source\PSoC5/PWM1.c ****     *
 858:Generated_Source\PSoC5/PWM1.c ****     * Return:
 859:Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM1.c ****     *
 861:Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM1.c ****     {
 864:Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM1.c ****     }
 866:Generated_Source\PSoC5/PWM1.c **** 
 867:Generated_Source\PSoC5/PWM1.c **** #endif /* (PWM1_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM1.c **** 
 869:Generated_Source\PSoC5/PWM1.c **** 
 870:Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_ReadPeriod
 872:Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM1.c **** *
 874:Generated_Source\PSoC5/PWM1.c **** * Summary:
 875:Generated_Source\PSoC5/PWM1.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM1.c **** *
 877:Generated_Source\PSoC5/PWM1.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM1.c **** *  None
 879:Generated_Source\PSoC5/PWM1.c **** *
 880:Generated_Source\PSoC5/PWM1.c **** * Return:
 881:Generated_Source\PSoC5/PWM1.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM1.c **** *
 883:Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM1.c **** uint8 PWM1_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM1.c **** {
 392              		.loc 1 885 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM1.c ****     #if(PWM1_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM1.c ****         return ((uint8)CY_GET_REG16(PWM1_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM1.c ****     #else
 889:Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_PERIOD_LSB_PTR));
 397              		.loc 1 889 0
 398 0000 014B     		ldr	r3, .L41
 399 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 890:Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM1.c **** }
 400              		.loc 1 891 0
 401 0004 7047     		bx	lr
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 24


 402              	.L42:
 403 0006 00BF     		.align	2
 404              	.L41:
 405 0008 49650040 		.word	1073767753
 406              		.cfi_endproc
 407              	.LFE13:
 408              		.size	PWM1_ReadPeriod, .-PWM1_ReadPeriod
 409              		.global	PWM1_initVar
 410              		.bss
 411              		.set	.LANCHOR0,. + 0
 412              		.type	PWM1_initVar, %object
 413              		.size	PWM1_initVar, 1
 414              	PWM1_initVar:
 415 0000 00       		.space	1
 416              		.text
 417              	.Letext0:
 418              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 419              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 420              		.section	.debug_info,"",%progbits
 421              	.Ldebug_info0:
 422 0000 C5020000 		.4byte	0x2c5
 423 0004 0400     		.2byte	0x4
 424 0006 00000000 		.4byte	.Ldebug_abbrev0
 425 000a 04       		.byte	0x4
 426 000b 01       		.uleb128 0x1
 427 000c 25010000 		.4byte	.LASF33
 428 0010 01       		.byte	0x1
 429 0011 00000000 		.4byte	.LASF34
 430 0015 A9020000 		.4byte	.LASF35
 431 0019 00000000 		.4byte	.Ldebug_ranges0+0
 432 001d 00000000 		.4byte	0
 433 0021 00000000 		.4byte	.Ldebug_line0
 434 0025 02       		.uleb128 0x2
 435 0026 01       		.byte	0x1
 436 0027 06       		.byte	0x6
 437 0028 95020000 		.4byte	.LASF0
 438 002c 02       		.uleb128 0x2
 439 002d 01       		.byte	0x1
 440 002e 08       		.byte	0x8
 441 002f CE000000 		.4byte	.LASF1
 442 0033 02       		.uleb128 0x2
 443 0034 02       		.byte	0x2
 444 0035 05       		.byte	0x5
 445 0036 5D020000 		.4byte	.LASF2
 446 003a 02       		.uleb128 0x2
 447 003b 02       		.byte	0x2
 448 003c 07       		.byte	0x7
 449 003d 4D000000 		.4byte	.LASF3
 450 0041 02       		.uleb128 0x2
 451 0042 04       		.byte	0x4
 452 0043 05       		.byte	0x5
 453 0044 87020000 		.4byte	.LASF4
 454 0048 02       		.uleb128 0x2
 455 0049 04       		.byte	0x4
 456 004a 07       		.byte	0x7
 457 004b E9000000 		.4byte	.LASF5
 458 004f 02       		.uleb128 0x2
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 25


 459 0050 08       		.byte	0x8
 460 0051 05       		.byte	0x5
 461 0052 25020000 		.4byte	.LASF6
 462 0056 02       		.uleb128 0x2
 463 0057 08       		.byte	0x8
 464 0058 07       		.byte	0x7
 465 0059 B7000000 		.4byte	.LASF7
 466 005d 03       		.uleb128 0x3
 467 005e 04       		.byte	0x4
 468 005f 05       		.byte	0x5
 469 0060 696E7400 		.ascii	"int\000"
 470 0064 02       		.uleb128 0x2
 471 0065 04       		.byte	0x4
 472 0066 07       		.byte	0x7
 473 0067 CA010000 		.4byte	.LASF8
 474 006b 04       		.uleb128 0x4
 475 006c FB000000 		.4byte	.LASF12
 476 0070 02       		.byte	0x2
 477 0071 9201     		.2byte	0x192
 478 0073 2C000000 		.4byte	0x2c
 479 0077 02       		.uleb128 0x2
 480 0078 04       		.byte	0x4
 481 0079 04       		.byte	0x4
 482 007a 40000000 		.4byte	.LASF9
 483 007e 02       		.uleb128 0x2
 484 007f 08       		.byte	0x8
 485 0080 04       		.byte	0x4
 486 0081 12010000 		.4byte	.LASF10
 487 0085 02       		.uleb128 0x2
 488 0086 01       		.byte	0x1
 489 0087 08       		.byte	0x8
 490 0088 90020000 		.4byte	.LASF11
 491 008c 04       		.uleb128 0x4
 492 008d FF010000 		.4byte	.LASF13
 493 0091 02       		.byte	0x2
 494 0092 3C02     		.2byte	0x23c
 495 0094 98000000 		.4byte	0x98
 496 0098 05       		.uleb128 0x5
 497 0099 6B000000 		.4byte	0x6b
 498 009d 02       		.uleb128 0x2
 499 009e 04       		.byte	0x4
 500 009f 07       		.byte	0x7
 501 00a0 1C020000 		.4byte	.LASF14
 502 00a4 06       		.uleb128 0x6
 503 00a5 19010000 		.4byte	.LASF15
 504 00a9 01       		.byte	0x1
 505 00aa C7       		.byte	0xc7
 506 00ab 00000000 		.4byte	.LFB2
 507 00af 02000000 		.4byte	.LFE2-.LFB2
 508 00b3 01       		.uleb128 0x1
 509 00b4 9C       		.byte	0x9c
 510 00b5 06       		.uleb128 0x6
 511 00b6 60000000 		.4byte	.LASF16
 512 00ba 01       		.byte	0x1
 513 00bb E9       		.byte	0xe9
 514 00bc 00000000 		.4byte	.LFB3
 515 00c0 02000000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 26


 516 00c4 01       		.uleb128 0x1
 517 00c5 9C       		.byte	0x9c
 518 00c6 07       		.uleb128 0x7
 519 00c7 D7010000 		.4byte	.LASF17
 520 00cb 01       		.byte	0x1
 521 00cc 9301     		.2byte	0x193
 522 00ce 00000000 		.4byte	.LFB4
 523 00d2 0C000000 		.4byte	.LFE4-.LFB4
 524 00d6 01       		.uleb128 0x1
 525 00d7 9C       		.byte	0x9c
 526 00d8 EB000000 		.4byte	0xeb
 527 00dc 08       		.uleb128 0x8
 528 00dd AF000000 		.4byte	.LASF19
 529 00e1 01       		.byte	0x1
 530 00e2 9301     		.2byte	0x193
 531 00e4 6B000000 		.4byte	0x6b
 532 00e8 01       		.uleb128 0x1
 533 00e9 50       		.byte	0x50
 534 00ea 00       		.byte	0
 535 00eb 09       		.uleb128 0x9
 536 00ec 01010000 		.4byte	.LASF25
 537 00f0 01       		.byte	0x1
 538 00f1 A901     		.2byte	0x1a9
 539 00f3 6B000000 		.4byte	0x6b
 540 00f7 00000000 		.4byte	.LFB5
 541 00fb 14000000 		.4byte	.LFE5-.LFB5
 542 00ff 01       		.uleb128 0x1
 543 0100 9C       		.byte	0x9c
 544 0101 07       		.uleb128 0x7
 545 0102 4C020000 		.4byte	.LASF18
 546 0106 01       		.byte	0x1
 547 0107 E201     		.2byte	0x1e2
 548 0109 00000000 		.4byte	.LFB7
 549 010d 0C000000 		.4byte	.LFE7-.LFB7
 550 0111 01       		.uleb128 0x1
 551 0112 9C       		.byte	0x9c
 552 0113 26010000 		.4byte	0x126
 553 0117 08       		.uleb128 0x8
 554 0118 46000000 		.4byte	.LASF20
 555 011c 01       		.byte	0x1
 556 011d E201     		.2byte	0x1e2
 557 011f 6B000000 		.4byte	0x6b
 558 0123 01       		.uleb128 0x1
 559 0124 50       		.byte	0x50
 560 0125 00       		.byte	0
 561 0126 07       		.uleb128 0x7
 562 0127 79000000 		.4byte	.LASF21
 563 012b 01       		.byte	0x1
 564 012c 0402     		.2byte	0x204
 565 012e 00000000 		.4byte	.LFB8
 566 0132 0C000000 		.4byte	.LFE8-.LFB8
 567 0136 01       		.uleb128 0x1
 568 0137 9C       		.byte	0x9c
 569 0138 4B010000 		.4byte	0x14b
 570 013c 08       		.uleb128 0x8
 571 013d A1020000 		.4byte	.LASF22
 572 0141 01       		.byte	0x1
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 27


 573 0142 0402     		.2byte	0x204
 574 0144 6B000000 		.4byte	0x6b
 575 0148 01       		.uleb128 0x1
 576 0149 50       		.byte	0x50
 577 014a 00       		.byte	0
 578 014b 07       		.uleb128 0x7
 579 014c 71020000 		.4byte	.LASF23
 580 0150 01       		.byte	0x1
 581 0151 AC02     		.2byte	0x2ac
 582 0153 00000000 		.4byte	.LFB9
 583 0157 0C000000 		.4byte	.LFE9-.LFB9
 584 015b 01       		.uleb128 0x1
 585 015c 9C       		.byte	0x9c
 586 015d 70010000 		.4byte	0x170
 587 0161 08       		.uleb128 0x8
 588 0162 33020000 		.4byte	.LASF24
 589 0166 01       		.byte	0x1
 590 0167 AC02     		.2byte	0x2ac
 591 0169 6B000000 		.4byte	0x6b
 592 016d 01       		.uleb128 0x1
 593 016e 50       		.byte	0x50
 594 016f 00       		.byte	0
 595 0170 09       		.uleb128 0x9
 596 0171 04020000 		.4byte	.LASF26
 597 0175 01       		.byte	0x1
 598 0176 C702     		.2byte	0x2c7
 599 0178 6B000000 		.4byte	0x6b
 600 017c 00000000 		.4byte	.LFB10
 601 0180 0C000000 		.4byte	.LFE10-.LFB10
 602 0184 01       		.uleb128 0x1
 603 0185 9C       		.byte	0x9c
 604 0186 09       		.uleb128 0x9
 605 0187 2F000000 		.4byte	.LASF27
 606 018b 01       		.byte	0x1
 607 018c 1603     		.2byte	0x316
 608 018e 6B000000 		.4byte	0x6b
 609 0192 00000000 		.4byte	.LFB11
 610 0196 0C000000 		.4byte	.LFE11-.LFB11
 611 019a 01       		.uleb128 0x1
 612 019b 9C       		.byte	0x9c
 613 019c 07       		.uleb128 0x7
 614 019d 6A000000 		.4byte	.LASF28
 615 01a1 01       		.byte	0x1
 616 01a2 C501     		.2byte	0x1c5
 617 01a4 00000000 		.4byte	.LFB6
 618 01a8 14000000 		.4byte	.LFE6-.LFB6
 619 01ac 01       		.uleb128 0x1
 620 01ad 9C       		.byte	0x9c
 621 01ae C5010000 		.4byte	0x1c5
 622 01b2 0A       		.uleb128 0xa
 623 01b3 08000000 		.4byte	.LVL4
 624 01b7 86010000 		.4byte	0x186
 625 01bb 0A       		.uleb128 0xa
 626 01bc 0C000000 		.4byte	.LVL5
 627 01c0 70010000 		.4byte	0x170
 628 01c4 00       		.byte	0
 629 01c5 0B       		.uleb128 0xb
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 28


 630 01c6 67020000 		.4byte	.LASF29
 631 01ca 01       		.byte	0x1
 632 01cb 54       		.byte	0x54
 633 01cc 00000000 		.4byte	.LFB1
 634 01d0 40000000 		.4byte	.LFE1-.LFB1
 635 01d4 01       		.uleb128 0x1
 636 01d5 9C       		.byte	0x9c
 637 01d6 54020000 		.4byte	0x254
 638 01da 0C       		.uleb128 0xc
 639 01db 8B000000 		.4byte	.LASF36
 640 01df 01       		.byte	0x1
 641 01e0 5D       		.byte	0x5d
 642 01e1 6B000000 		.4byte	0x6b
 643 01e5 00000000 		.4byte	.LLST0
 644 01e9 0D       		.uleb128 0xd
 645 01ea 12000000 		.4byte	.LVL6
 646 01ee C6000000 		.4byte	0xc6
 647 01f2 FD010000 		.4byte	0x1fd
 648 01f6 0E       		.uleb128 0xe
 649 01f7 01       		.uleb128 0x1
 650 01f8 50       		.byte	0x50
 651 01f9 02       		.uleb128 0x2
 652 01fa 09       		.byte	0x9
 653 01fb FF       		.byte	0xff
 654 01fc 00       		.byte	0
 655 01fd 0D       		.uleb128 0xd
 656 01fe 18000000 		.4byte	.LVL7
 657 0202 01010000 		.4byte	0x101
 658 0206 11020000 		.4byte	0x211
 659 020a 0E       		.uleb128 0xe
 660 020b 01       		.uleb128 0x1
 661 020c 50       		.byte	0x50
 662 020d 02       		.uleb128 0x2
 663 020e 09       		.byte	0x9
 664 020f FF       		.byte	0xff
 665 0210 00       		.byte	0
 666 0211 0D       		.uleb128 0xd
 667 0212 1E000000 		.4byte	.LVL8
 668 0216 26010000 		.4byte	0x126
 669 021a 25020000 		.4byte	0x225
 670 021e 0E       		.uleb128 0xe
 671 021f 01       		.uleb128 0x1
 672 0220 50       		.byte	0x50
 673 0221 02       		.uleb128 0x2
 674 0222 08       		.byte	0x8
 675 0223 7F       		.byte	0x7f
 676 0224 00       		.byte	0
 677 0225 0D       		.uleb128 0xd
 678 0226 24000000 		.4byte	.LVL9
 679 022a 4B010000 		.4byte	0x14b
 680 022e 38020000 		.4byte	0x238
 681 0232 0E       		.uleb128 0xe
 682 0233 01       		.uleb128 0x1
 683 0234 50       		.byte	0x50
 684 0235 01       		.uleb128 0x1
 685 0236 30       		.byte	0x30
 686 0237 00       		.byte	0
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 29


 687 0238 0A       		.uleb128 0xa
 688 0239 28000000 		.4byte	.LVL10
 689 023d B0020000 		.4byte	0x2b0
 690 0241 0A       		.uleb128 0xa
 691 0242 34000000 		.4byte	.LVL11
 692 0246 BB020000 		.4byte	0x2bb
 693 024a 0A       		.uleb128 0xa
 694 024b 38000000 		.4byte	.LVL12
 695 024f 9C010000 		.4byte	0x19c
 696 0253 00       		.byte	0
 697 0254 0B       		.uleb128 0xb
 698 0255 41020000 		.4byte	.LASF30
 699 0259 01       		.byte	0x1
 700 025a 37       		.byte	0x37
 701 025b 00000000 		.4byte	.LFB0
 702 025f 18000000 		.4byte	.LFE0-.LFB0
 703 0263 01       		.uleb128 0x1
 704 0264 9C       		.byte	0x9c
 705 0265 73020000 		.4byte	0x273
 706 0269 0A       		.uleb128 0xa
 707 026a 0C000000 		.4byte	.LVL13
 708 026e C5010000 		.4byte	0x1c5
 709 0272 00       		.byte	0
 710 0273 09       		.uleb128 0x9
 711 0274 1E000000 		.4byte	.LASF31
 712 0278 01       		.byte	0x1
 713 0279 3003     		.2byte	0x330
 714 027b 6B000000 		.4byte	0x6b
 715 027f 00000000 		.4byte	.LFB12
 716 0283 0C000000 		.4byte	.LFE12-.LFB12
 717 0287 01       		.uleb128 0x1
 718 0288 9C       		.byte	0x9c
 719 0289 09       		.uleb128 0x9
 720 028a 9F000000 		.4byte	.LASF32
 721 028e 01       		.byte	0x1
 722 028f 7403     		.2byte	0x374
 723 0291 6B000000 		.4byte	0x6b
 724 0295 00000000 		.4byte	.LFB13
 725 0299 0C000000 		.4byte	.LFE13-.LFB13
 726 029d 01       		.uleb128 0x1
 727 029e 9C       		.byte	0x9c
 728 029f 0F       		.uleb128 0xf
 729 02a0 DC000000 		.4byte	.LASF37
 730 02a4 01       		.byte	0x1
 731 02a5 20       		.byte	0x20
 732 02a6 6B000000 		.4byte	0x6b
 733 02aa 05       		.uleb128 0x5
 734 02ab 03       		.byte	0x3
 735 02ac 00000000 		.4byte	PWM1_initVar
 736 02b0 10       		.uleb128 0x10
 737 02b1 B3010000 		.4byte	.LASF38
 738 02b5 03       		.byte	0x3
 739 02b6 7D       		.byte	0x7d
 740 02b7 6B000000 		.4byte	0x6b
 741 02bb 11       		.uleb128 0x11
 742 02bc E9010000 		.4byte	.LASF39
 743 02c0 03       		.byte	0x3
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 30


 744 02c1 7E       		.byte	0x7e
 745 02c2 12       		.uleb128 0x12
 746 02c3 6B000000 		.4byte	0x6b
 747 02c7 00       		.byte	0
 748 02c8 00       		.byte	0
 749              		.section	.debug_abbrev,"",%progbits
 750              	.Ldebug_abbrev0:
 751 0000 01       		.uleb128 0x1
 752 0001 11       		.uleb128 0x11
 753 0002 01       		.byte	0x1
 754 0003 25       		.uleb128 0x25
 755 0004 0E       		.uleb128 0xe
 756 0005 13       		.uleb128 0x13
 757 0006 0B       		.uleb128 0xb
 758 0007 03       		.uleb128 0x3
 759 0008 0E       		.uleb128 0xe
 760 0009 1B       		.uleb128 0x1b
 761 000a 0E       		.uleb128 0xe
 762 000b 55       		.uleb128 0x55
 763 000c 17       		.uleb128 0x17
 764 000d 11       		.uleb128 0x11
 765 000e 01       		.uleb128 0x1
 766 000f 10       		.uleb128 0x10
 767 0010 17       		.uleb128 0x17
 768 0011 00       		.byte	0
 769 0012 00       		.byte	0
 770 0013 02       		.uleb128 0x2
 771 0014 24       		.uleb128 0x24
 772 0015 00       		.byte	0
 773 0016 0B       		.uleb128 0xb
 774 0017 0B       		.uleb128 0xb
 775 0018 3E       		.uleb128 0x3e
 776 0019 0B       		.uleb128 0xb
 777 001a 03       		.uleb128 0x3
 778 001b 0E       		.uleb128 0xe
 779 001c 00       		.byte	0
 780 001d 00       		.byte	0
 781 001e 03       		.uleb128 0x3
 782 001f 24       		.uleb128 0x24
 783 0020 00       		.byte	0
 784 0021 0B       		.uleb128 0xb
 785 0022 0B       		.uleb128 0xb
 786 0023 3E       		.uleb128 0x3e
 787 0024 0B       		.uleb128 0xb
 788 0025 03       		.uleb128 0x3
 789 0026 08       		.uleb128 0x8
 790 0027 00       		.byte	0
 791 0028 00       		.byte	0
 792 0029 04       		.uleb128 0x4
 793 002a 16       		.uleb128 0x16
 794 002b 00       		.byte	0
 795 002c 03       		.uleb128 0x3
 796 002d 0E       		.uleb128 0xe
 797 002e 3A       		.uleb128 0x3a
 798 002f 0B       		.uleb128 0xb
 799 0030 3B       		.uleb128 0x3b
 800 0031 05       		.uleb128 0x5
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 31


 801 0032 49       		.uleb128 0x49
 802 0033 13       		.uleb128 0x13
 803 0034 00       		.byte	0
 804 0035 00       		.byte	0
 805 0036 05       		.uleb128 0x5
 806 0037 35       		.uleb128 0x35
 807 0038 00       		.byte	0
 808 0039 49       		.uleb128 0x49
 809 003a 13       		.uleb128 0x13
 810 003b 00       		.byte	0
 811 003c 00       		.byte	0
 812 003d 06       		.uleb128 0x6
 813 003e 2E       		.uleb128 0x2e
 814 003f 00       		.byte	0
 815 0040 3F       		.uleb128 0x3f
 816 0041 19       		.uleb128 0x19
 817 0042 03       		.uleb128 0x3
 818 0043 0E       		.uleb128 0xe
 819 0044 3A       		.uleb128 0x3a
 820 0045 0B       		.uleb128 0xb
 821 0046 3B       		.uleb128 0x3b
 822 0047 0B       		.uleb128 0xb
 823 0048 27       		.uleb128 0x27
 824 0049 19       		.uleb128 0x19
 825 004a 11       		.uleb128 0x11
 826 004b 01       		.uleb128 0x1
 827 004c 12       		.uleb128 0x12
 828 004d 06       		.uleb128 0x6
 829 004e 40       		.uleb128 0x40
 830 004f 18       		.uleb128 0x18
 831 0050 9742     		.uleb128 0x2117
 832 0052 19       		.uleb128 0x19
 833 0053 00       		.byte	0
 834 0054 00       		.byte	0
 835 0055 07       		.uleb128 0x7
 836 0056 2E       		.uleb128 0x2e
 837 0057 01       		.byte	0x1
 838 0058 3F       		.uleb128 0x3f
 839 0059 19       		.uleb128 0x19
 840 005a 03       		.uleb128 0x3
 841 005b 0E       		.uleb128 0xe
 842 005c 3A       		.uleb128 0x3a
 843 005d 0B       		.uleb128 0xb
 844 005e 3B       		.uleb128 0x3b
 845 005f 05       		.uleb128 0x5
 846 0060 27       		.uleb128 0x27
 847 0061 19       		.uleb128 0x19
 848 0062 11       		.uleb128 0x11
 849 0063 01       		.uleb128 0x1
 850 0064 12       		.uleb128 0x12
 851 0065 06       		.uleb128 0x6
 852 0066 40       		.uleb128 0x40
 853 0067 18       		.uleb128 0x18
 854 0068 9742     		.uleb128 0x2117
 855 006a 19       		.uleb128 0x19
 856 006b 01       		.uleb128 0x1
 857 006c 13       		.uleb128 0x13
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 32


 858 006d 00       		.byte	0
 859 006e 00       		.byte	0
 860 006f 08       		.uleb128 0x8
 861 0070 05       		.uleb128 0x5
 862 0071 00       		.byte	0
 863 0072 03       		.uleb128 0x3
 864 0073 0E       		.uleb128 0xe
 865 0074 3A       		.uleb128 0x3a
 866 0075 0B       		.uleb128 0xb
 867 0076 3B       		.uleb128 0x3b
 868 0077 05       		.uleb128 0x5
 869 0078 49       		.uleb128 0x49
 870 0079 13       		.uleb128 0x13
 871 007a 02       		.uleb128 0x2
 872 007b 18       		.uleb128 0x18
 873 007c 00       		.byte	0
 874 007d 00       		.byte	0
 875 007e 09       		.uleb128 0x9
 876 007f 2E       		.uleb128 0x2e
 877 0080 00       		.byte	0
 878 0081 3F       		.uleb128 0x3f
 879 0082 19       		.uleb128 0x19
 880 0083 03       		.uleb128 0x3
 881 0084 0E       		.uleb128 0xe
 882 0085 3A       		.uleb128 0x3a
 883 0086 0B       		.uleb128 0xb
 884 0087 3B       		.uleb128 0x3b
 885 0088 05       		.uleb128 0x5
 886 0089 27       		.uleb128 0x27
 887 008a 19       		.uleb128 0x19
 888 008b 49       		.uleb128 0x49
 889 008c 13       		.uleb128 0x13
 890 008d 11       		.uleb128 0x11
 891 008e 01       		.uleb128 0x1
 892 008f 12       		.uleb128 0x12
 893 0090 06       		.uleb128 0x6
 894 0091 40       		.uleb128 0x40
 895 0092 18       		.uleb128 0x18
 896 0093 9742     		.uleb128 0x2117
 897 0095 19       		.uleb128 0x19
 898 0096 00       		.byte	0
 899 0097 00       		.byte	0
 900 0098 0A       		.uleb128 0xa
 901 0099 898201   		.uleb128 0x4109
 902 009c 00       		.byte	0
 903 009d 11       		.uleb128 0x11
 904 009e 01       		.uleb128 0x1
 905 009f 31       		.uleb128 0x31
 906 00a0 13       		.uleb128 0x13
 907 00a1 00       		.byte	0
 908 00a2 00       		.byte	0
 909 00a3 0B       		.uleb128 0xb
 910 00a4 2E       		.uleb128 0x2e
 911 00a5 01       		.byte	0x1
 912 00a6 3F       		.uleb128 0x3f
 913 00a7 19       		.uleb128 0x19
 914 00a8 03       		.uleb128 0x3
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 33


 915 00a9 0E       		.uleb128 0xe
 916 00aa 3A       		.uleb128 0x3a
 917 00ab 0B       		.uleb128 0xb
 918 00ac 3B       		.uleb128 0x3b
 919 00ad 0B       		.uleb128 0xb
 920 00ae 27       		.uleb128 0x27
 921 00af 19       		.uleb128 0x19
 922 00b0 11       		.uleb128 0x11
 923 00b1 01       		.uleb128 0x1
 924 00b2 12       		.uleb128 0x12
 925 00b3 06       		.uleb128 0x6
 926 00b4 40       		.uleb128 0x40
 927 00b5 18       		.uleb128 0x18
 928 00b6 9742     		.uleb128 0x2117
 929 00b8 19       		.uleb128 0x19
 930 00b9 01       		.uleb128 0x1
 931 00ba 13       		.uleb128 0x13
 932 00bb 00       		.byte	0
 933 00bc 00       		.byte	0
 934 00bd 0C       		.uleb128 0xc
 935 00be 34       		.uleb128 0x34
 936 00bf 00       		.byte	0
 937 00c0 03       		.uleb128 0x3
 938 00c1 0E       		.uleb128 0xe
 939 00c2 3A       		.uleb128 0x3a
 940 00c3 0B       		.uleb128 0xb
 941 00c4 3B       		.uleb128 0x3b
 942 00c5 0B       		.uleb128 0xb
 943 00c6 49       		.uleb128 0x49
 944 00c7 13       		.uleb128 0x13
 945 00c8 02       		.uleb128 0x2
 946 00c9 17       		.uleb128 0x17
 947 00ca 00       		.byte	0
 948 00cb 00       		.byte	0
 949 00cc 0D       		.uleb128 0xd
 950 00cd 898201   		.uleb128 0x4109
 951 00d0 01       		.byte	0x1
 952 00d1 11       		.uleb128 0x11
 953 00d2 01       		.uleb128 0x1
 954 00d3 31       		.uleb128 0x31
 955 00d4 13       		.uleb128 0x13
 956 00d5 01       		.uleb128 0x1
 957 00d6 13       		.uleb128 0x13
 958 00d7 00       		.byte	0
 959 00d8 00       		.byte	0
 960 00d9 0E       		.uleb128 0xe
 961 00da 8A8201   		.uleb128 0x410a
 962 00dd 00       		.byte	0
 963 00de 02       		.uleb128 0x2
 964 00df 18       		.uleb128 0x18
 965 00e0 9142     		.uleb128 0x2111
 966 00e2 18       		.uleb128 0x18
 967 00e3 00       		.byte	0
 968 00e4 00       		.byte	0
 969 00e5 0F       		.uleb128 0xf
 970 00e6 34       		.uleb128 0x34
 971 00e7 00       		.byte	0
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 34


 972 00e8 03       		.uleb128 0x3
 973 00e9 0E       		.uleb128 0xe
 974 00ea 3A       		.uleb128 0x3a
 975 00eb 0B       		.uleb128 0xb
 976 00ec 3B       		.uleb128 0x3b
 977 00ed 0B       		.uleb128 0xb
 978 00ee 49       		.uleb128 0x49
 979 00ef 13       		.uleb128 0x13
 980 00f0 3F       		.uleb128 0x3f
 981 00f1 19       		.uleb128 0x19
 982 00f2 02       		.uleb128 0x2
 983 00f3 18       		.uleb128 0x18
 984 00f4 00       		.byte	0
 985 00f5 00       		.byte	0
 986 00f6 10       		.uleb128 0x10
 987 00f7 2E       		.uleb128 0x2e
 988 00f8 00       		.byte	0
 989 00f9 3F       		.uleb128 0x3f
 990 00fa 19       		.uleb128 0x19
 991 00fb 03       		.uleb128 0x3
 992 00fc 0E       		.uleb128 0xe
 993 00fd 3A       		.uleb128 0x3a
 994 00fe 0B       		.uleb128 0xb
 995 00ff 3B       		.uleb128 0x3b
 996 0100 0B       		.uleb128 0xb
 997 0101 27       		.uleb128 0x27
 998 0102 19       		.uleb128 0x19
 999 0103 49       		.uleb128 0x49
 1000 0104 13       		.uleb128 0x13
 1001 0105 3C       		.uleb128 0x3c
 1002 0106 19       		.uleb128 0x19
 1003 0107 00       		.byte	0
 1004 0108 00       		.byte	0
 1005 0109 11       		.uleb128 0x11
 1006 010a 2E       		.uleb128 0x2e
 1007 010b 01       		.byte	0x1
 1008 010c 3F       		.uleb128 0x3f
 1009 010d 19       		.uleb128 0x19
 1010 010e 03       		.uleb128 0x3
 1011 010f 0E       		.uleb128 0xe
 1012 0110 3A       		.uleb128 0x3a
 1013 0111 0B       		.uleb128 0xb
 1014 0112 3B       		.uleb128 0x3b
 1015 0113 0B       		.uleb128 0xb
 1016 0114 27       		.uleb128 0x27
 1017 0115 19       		.uleb128 0x19
 1018 0116 3C       		.uleb128 0x3c
 1019 0117 19       		.uleb128 0x19
 1020 0118 00       		.byte	0
 1021 0119 00       		.byte	0
 1022 011a 12       		.uleb128 0x12
 1023 011b 05       		.uleb128 0x5
 1024 011c 00       		.byte	0
 1025 011d 49       		.uleb128 0x49
 1026 011e 13       		.uleb128 0x13
 1027 011f 00       		.byte	0
 1028 0120 00       		.byte	0
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 35


 1029 0121 00       		.byte	0
 1030              		.section	.debug_loc,"",%progbits
 1031              	.Ldebug_loc0:
 1032              	.LLST0:
 1033 0000 28000000 		.4byte	.LVL10
 1034 0004 33000000 		.4byte	.LVL11-1
 1035 0008 0100     		.2byte	0x1
 1036 000a 50       		.byte	0x50
 1037 000b 00000000 		.4byte	0
 1038 000f 00000000 		.4byte	0
 1039              		.section	.debug_aranges,"",%progbits
 1040 0000 84000000 		.4byte	0x84
 1041 0004 0200     		.2byte	0x2
 1042 0006 00000000 		.4byte	.Ldebug_info0
 1043 000a 04       		.byte	0x4
 1044 000b 00       		.byte	0
 1045 000c 0000     		.2byte	0
 1046 000e 0000     		.2byte	0
 1047 0010 00000000 		.4byte	.LFB2
 1048 0014 02000000 		.4byte	.LFE2-.LFB2
 1049 0018 00000000 		.4byte	.LFB3
 1050 001c 02000000 		.4byte	.LFE3-.LFB3
 1051 0020 00000000 		.4byte	.LFB4
 1052 0024 0C000000 		.4byte	.LFE4-.LFB4
 1053 0028 00000000 		.4byte	.LFB5
 1054 002c 14000000 		.4byte	.LFE5-.LFB5
 1055 0030 00000000 		.4byte	.LFB7
 1056 0034 0C000000 		.4byte	.LFE7-.LFB7
 1057 0038 00000000 		.4byte	.LFB8
 1058 003c 0C000000 		.4byte	.LFE8-.LFB8
 1059 0040 00000000 		.4byte	.LFB9
 1060 0044 0C000000 		.4byte	.LFE9-.LFB9
 1061 0048 00000000 		.4byte	.LFB10
 1062 004c 0C000000 		.4byte	.LFE10-.LFB10
 1063 0050 00000000 		.4byte	.LFB11
 1064 0054 0C000000 		.4byte	.LFE11-.LFB11
 1065 0058 00000000 		.4byte	.LFB6
 1066 005c 14000000 		.4byte	.LFE6-.LFB6
 1067 0060 00000000 		.4byte	.LFB1
 1068 0064 40000000 		.4byte	.LFE1-.LFB1
 1069 0068 00000000 		.4byte	.LFB0
 1070 006c 18000000 		.4byte	.LFE0-.LFB0
 1071 0070 00000000 		.4byte	.LFB12
 1072 0074 0C000000 		.4byte	.LFE12-.LFB12
 1073 0078 00000000 		.4byte	.LFB13
 1074 007c 0C000000 		.4byte	.LFE13-.LFB13
 1075 0080 00000000 		.4byte	0
 1076 0084 00000000 		.4byte	0
 1077              		.section	.debug_ranges,"",%progbits
 1078              	.Ldebug_ranges0:
 1079 0000 00000000 		.4byte	.LFB2
 1080 0004 02000000 		.4byte	.LFE2
 1081 0008 00000000 		.4byte	.LFB3
 1082 000c 02000000 		.4byte	.LFE3
 1083 0010 00000000 		.4byte	.LFB4
 1084 0014 0C000000 		.4byte	.LFE4
 1085 0018 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 36


 1086 001c 14000000 		.4byte	.LFE5
 1087 0020 00000000 		.4byte	.LFB7
 1088 0024 0C000000 		.4byte	.LFE7
 1089 0028 00000000 		.4byte	.LFB8
 1090 002c 0C000000 		.4byte	.LFE8
 1091 0030 00000000 		.4byte	.LFB9
 1092 0034 0C000000 		.4byte	.LFE9
 1093 0038 00000000 		.4byte	.LFB10
 1094 003c 0C000000 		.4byte	.LFE10
 1095 0040 00000000 		.4byte	.LFB11
 1096 0044 0C000000 		.4byte	.LFE11
 1097 0048 00000000 		.4byte	.LFB6
 1098 004c 14000000 		.4byte	.LFE6
 1099 0050 00000000 		.4byte	.LFB1
 1100 0054 40000000 		.4byte	.LFE1
 1101 0058 00000000 		.4byte	.LFB0
 1102 005c 18000000 		.4byte	.LFE0
 1103 0060 00000000 		.4byte	.LFB12
 1104 0064 0C000000 		.4byte	.LFE12
 1105 0068 00000000 		.4byte	.LFB13
 1106 006c 0C000000 		.4byte	.LFE13
 1107 0070 00000000 		.4byte	0
 1108 0074 00000000 		.4byte	0
 1109              		.section	.debug_line,"",%progbits
 1110              	.Ldebug_line0:
 1111 0000 56010000 		.section	.debug_str,"MS",%progbits,1
 1111      02004C00 
 1111      00000201 
 1111      FB0E0D00 
 1111      01010101 
 1112              	.LASF34:
 1113 0000 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM1.c\000"
 1113      72617465 
 1113      645F536F 
 1113      75726365 
 1113      5C50536F 
 1114              	.LASF31:
 1115 001e 50574D31 		.ascii	"PWM1_ReadCompare\000"
 1115      5F526561 
 1115      64436F6D 
 1115      70617265 
 1115      00
 1116              	.LASF27:
 1117 002f 50574D31 		.ascii	"PWM1_ReadCapture\000"
 1117      5F526561 
 1117      64436170 
 1117      74757265 
 1117      00
 1118              	.LASF9:
 1119 0040 666C6F61 		.ascii	"float\000"
 1119      7400
 1120              	.LASF20:
 1121 0046 70657269 		.ascii	"period\000"
 1121      6F6400
 1122              	.LASF3:
 1123 004d 73686F72 		.ascii	"short unsigned int\000"
 1123      7420756E 
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 37


 1123      7369676E 
 1123      65642069 
 1123      6E7400
 1124              	.LASF16:
 1125 0060 50574D31 		.ascii	"PWM1_Stop\000"
 1125      5F53746F 
 1125      7000
 1126              	.LASF28:
 1127 006a 50574D31 		.ascii	"PWM1_ClearFIFO\000"
 1127      5F436C65 
 1127      61724649 
 1127      464F00
 1128              	.LASF21:
 1129 0079 50574D31 		.ascii	"PWM1_WriteCompare\000"
 1129      5F577269 
 1129      7465436F 
 1129      6D706172 
 1129      6500
 1130              	.LASF36:
 1131 008b 50574D31 		.ascii	"PWM1_interruptState\000"
 1131      5F696E74 
 1131      65727275 
 1131      70745374 
 1131      61746500 
 1132              	.LASF32:
 1133 009f 50574D31 		.ascii	"PWM1_ReadPeriod\000"
 1133      5F526561 
 1133      64506572 
 1133      696F6400 
 1134              	.LASF19:
 1135 00af 636F756E 		.ascii	"counter\000"
 1135      74657200 
 1136              	.LASF7:
 1137 00b7 6C6F6E67 		.ascii	"long long unsigned int\000"
 1137      206C6F6E 
 1137      6720756E 
 1137      7369676E 
 1137      65642069 
 1138              	.LASF1:
 1139 00ce 756E7369 		.ascii	"unsigned char\000"
 1139      676E6564 
 1139      20636861 
 1139      7200
 1140              	.LASF37:
 1141 00dc 50574D31 		.ascii	"PWM1_initVar\000"
 1141      5F696E69 
 1141      74566172 
 1141      00
 1142              	.LASF5:
 1143 00e9 6C6F6E67 		.ascii	"long unsigned int\000"
 1143      20756E73 
 1143      69676E65 
 1143      6420696E 
 1143      7400
 1144              	.LASF12:
 1145 00fb 75696E74 		.ascii	"uint8\000"
 1145      3800
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 38


 1146              	.LASF25:
 1147 0101 50574D31 		.ascii	"PWM1_ReadCounter\000"
 1147      5F526561 
 1147      64436F75 
 1147      6E746572 
 1147      00
 1148              	.LASF10:
 1149 0112 646F7562 		.ascii	"double\000"
 1149      6C6500
 1150              	.LASF15:
 1151 0119 50574D31 		.ascii	"PWM1_Enable\000"
 1151      5F456E61 
 1151      626C6500 
 1152              	.LASF33:
 1153 0125 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1153      4320342E 
 1153      392E3320 
 1153      32303135 
 1153      30333033 
 1154 0158 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1154      20726576 
 1154      6973696F 
 1154      6E203232 
 1154      31323230 
 1155 018b 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1155      66756E63 
 1155      74696F6E 
 1155      2D736563 
 1155      74696F6E 
 1156              	.LASF38:
 1157 01b3 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1157      74657243 
 1157      72697469 
 1157      63616C53 
 1157      65637469 
 1158              	.LASF8:
 1159 01ca 756E7369 		.ascii	"unsigned int\000"
 1159      676E6564 
 1159      20696E74 
 1159      00
 1160              	.LASF17:
 1161 01d7 50574D31 		.ascii	"PWM1_WriteCounter\000"
 1161      5F577269 
 1161      7465436F 
 1161      756E7465 
 1161      7200
 1162              	.LASF39:
 1163 01e9 43794578 		.ascii	"CyExitCriticalSection\000"
 1163      69744372 
 1163      69746963 
 1163      616C5365 
 1163      6374696F 
 1164              	.LASF13:
 1165 01ff 72656738 		.ascii	"reg8\000"
 1165      00
 1166              	.LASF26:
 1167 0204 50574D31 		.ascii	"PWM1_ReadStatusRegister\000"
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 39


 1167      5F526561 
 1167      64537461 
 1167      74757352 
 1167      65676973 
 1168              	.LASF14:
 1169 021c 73697A65 		.ascii	"sizetype\000"
 1169      74797065 
 1169      00
 1170              	.LASF6:
 1171 0225 6C6F6E67 		.ascii	"long long int\000"
 1171      206C6F6E 
 1171      6720696E 
 1171      7400
 1172              	.LASF24:
 1173 0233 696E7465 		.ascii	"interruptMode\000"
 1173      72727570 
 1173      744D6F64 
 1173      6500
 1174              	.LASF30:
 1175 0241 50574D31 		.ascii	"PWM1_Start\000"
 1175      5F537461 
 1175      727400
 1176              	.LASF18:
 1177 024c 50574D31 		.ascii	"PWM1_WritePeriod\000"
 1177      5F577269 
 1177      74655065 
 1177      72696F64 
 1177      00
 1178              	.LASF2:
 1179 025d 73686F72 		.ascii	"short int\000"
 1179      7420696E 
 1179      7400
 1180              	.LASF29:
 1181 0267 50574D31 		.ascii	"PWM1_Init\000"
 1181      5F496E69 
 1181      7400
 1182              	.LASF23:
 1183 0271 50574D31 		.ascii	"PWM1_SetInterruptMode\000"
 1183      5F536574 
 1183      496E7465 
 1183      72727570 
 1183      744D6F64 
 1184              	.LASF4:
 1185 0287 6C6F6E67 		.ascii	"long int\000"
 1185      20696E74 
 1185      00
 1186              	.LASF11:
 1187 0290 63686172 		.ascii	"char\000"
 1187      00
 1188              	.LASF0:
 1189 0295 7369676E 		.ascii	"signed char\000"
 1189      65642063 
 1189      68617200 
 1190              	.LASF22:
 1191 02a1 636F6D70 		.ascii	"compare\000"
 1191      61726500 
 1192              	.LASF35:
ARM GAS  C:\Users\DANIEL~1\AppData\Local\Temp\cc1tu8as.s 			page 40


 1193 02a9 433A5C55 		.ascii	"C:\\Users\\Daniel Mendez\\Desktop\\PSoC\\Cualquiera"
 1193      73657273 
 1193      5C44616E 
 1193      69656C20 
 1193      4D656E64 
 1194 02d7 5C446573 		.ascii	"\\Design01.cydsn\000"
 1194      69676E30 
 1194      312E6379 
 1194      64736E00 
 1195              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
